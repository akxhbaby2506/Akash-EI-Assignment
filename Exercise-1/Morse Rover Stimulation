import logging

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Position Class
class Position:
    def __init__(self, x, y, direction):
        self.x = x
        self.y = y
        self.direction = direction

    def __str__(self):
        return f"({self.x}, {self.y}, {self.direction})"

# Rover Class
class Rover:
    DIRECTIONS = ['N', 'E', 'S', 'W']
    
    def __init__(self, grid, start_position, obstacles=[]):
        self.grid = grid
        self.position = start_position
        self.obstacles = obstacles

    def move(self):
        if self.position.direction == 'N':
            new_position = Position(self.position.x, self.position.y + 1, self.position.direction)
        elif self.position.direction == 'E':
            new_position = Position(self.position.x + 1, self.position.y, self.position.direction)
        elif self.position.direction == 'S':
            new_position = Position(self.position.x, self.position.y - 1, self.position.direction)
        elif self.position.direction == 'W':
            new_position = Position(self.position.x - 1, self.position.y, self.position.direction)

        if self.is_within_bounds(new_position) and not self.is_obstacle(new_position):
            self.position = new_position
        else:
            logging.info(f"Obstacle detected or out of bounds at {new_position}")

    def turn_left(self):
        current_index = self.DIRECTIONS.index(self.position.direction)
        new_direction = self.DIRECTIONS[(current_index - 1) % 4]
        self.position.direction = new_direction

    def turn_right(self):
        current_index = self.DIRECTIONS.index(self.position.direction)
        new_direction = self.DIRECTIONS[(current_index + 1) % 4]
        self.position.direction = new_direction

    def is_within_bounds(self, position):
        return 0 <= position.x < self.grid.width and 0 <= position.y < self.grid.height

    def is_obstacle(self, position):
        return (position.x, position.y) in self.obstacles

# Command Pattern
class Command:
    def execute(self):
        pass

class MoveCommand(Command):
    def __init__(self, rover):
        self.rover = rover

    def execute(self):
        self.rover.move()

class TurnLeftCommand(Command):
    def __init__(self, rover):
        self.rover = rover

    def execute(self):
        self.rover.turn_left()

class TurnRightCommand(Command):
    def __init__(self, rover):
        self.rover = rover

    def execute(self):
        self.rover.turn_right()

# Composite Pattern for Grid
class Grid:
    def __init__(self, width, height):
        self.width = width
        self.height = height

# Example Usage
if __name__ == "__main__":
    # Define grid and obstacles
    grid = Grid(10, 10)
    obstacles = [(2, 2), (3, 5)]

    # Initialize rover
    start_position = Position(0, 0, 'N')
    rover = Rover(grid, start_position, obstacles)

    # Define commands
    # Define commands
    commands = [
    MoveCommand(rover),   # Move North from (0, 0, N) to (0, 1, N)
    MoveCommand(rover),   # Move North from (0, 1, N) to (0, 2, N)
    TurnRightCommand(rover),  # Turn right from (0, 2, N) facing East
    MoveCommand(rover),   # Move East from (0, 2, E) to (1, 2, E)
    TurnLeftCommand(rover),   # Turn left from (1, 2, E) facing North
    MoveCommand(rover),    # Move North from (1, 2, N) to (1, 3, N)
    TurnRightCommand(rover)   # Turn right from (1, 3, N) to (1, 3, E)
    ]


    # Execute commands
    for command in commands:
        command.execute()
        logging.info(f"Rover's position: {rover.position}")

    # Optional: Print status report
    logging.info(f"Rover is at {rover.position}")
